package com.vangelnum.wisher.presentation

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.vangelnum.wisher.data.model.RegisterRequest
import com.vangelnum.wisher.data.repository.AuthRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AuthViewModel @Inject constructor(
    private val authRepository: AuthRepository
) : ViewModel() {

    // Registration
    private val _registrationState = MutableStateFlow<AuthUiState>(AuthUiState.Idle)
    val registrationState: StateFlow<AuthUiState> = _registrationState.asStateFlow()
    var registrationName by mutableStateOf("")
        private set
    var registrationEmail by mutableStateOf("")
        private set
    var registrationPassword by mutableStateOf("")
        private set
    var registrationAvatarUrl by mutableStateOf("")
        private set

    fun onRegistrationNameChange(name: String) {
        registrationName = name
    }

    fun onRegistrationEmailChange(email: String) {
        registrationEmail = email
    }

    fun onRegistrationPasswordChange(password: String) {
        registrationPassword = password
    }

    fun onRegistrationAvatarUrlChange(avatarUrl: String) {
        registrationAvatarUrl = avatarUrl
    }

    fun register() {
        _registrationState.update { AuthUiState.Loading }
        val request = RegisterRequest(
            name = registrationName,
            password = registrationPassword,
            email = registrationEmail,
            avatarUrl = registrationAvatarUrl.takeIf { it.isNotBlank() }
        )
        viewModelScope.launch {
            authRepository.register(request).collect { result ->
                _registrationState.update {
                    when (result.isSuccess) {
                        true -> AuthUiState.Success
                        false -> AuthUiState.Error(result.exceptionOrNull()?.message ?: "Registration failed")
                    }
                }
            }
        }
    }

    // Login (for fetching user info)
    private val _loginState = MutableStateFlow<UserInfoUiState>(UserInfoUiState.Idle)
    val loginState: StateFlow<UserInfoUiState> = _loginState.asStateFlow()
    var loginEmail by mutableStateOf("")
        private set
    var loginPassword by mutableStateOf("")
        private set

    fun onLoginEmailChange(email: String) {
        loginEmail = email
    }

    fun onLoginPasswordChange(password: String) {
        loginPassword = password
    }

    fun fetchUserInfo() {
        _loginState.update { UserInfoUiState.Loading }
        viewModelScope.launch {
            authRepository.getUserInfo(loginEmail, loginPassword).collect { result ->
                _loginState.update {
                    when (result.isSuccess) {
                        true -> UserInfoUiState.Success(result.getOrNull()!!)
                        false -> UserInfoUiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch user info")
                    }
                }
            }
        }
    }

    fun resetRegistrationState() {
        _registrationState.update { AuthUiState.Idle }
    }

    fun resetLoginState() {
        _loginState.update { UserInfoUiState.Idle }
    }
}